const express = require("express");
const app = express();
const mongoose = require("mongoose");
const Listing = require("./models/listing.js")
const path = require("path");
const methodOverride = require("method-override");
const ejsMate  = require("ejs-mate");
const wrapAsync = require("./utils/wrapasync.js")
const ExpressError = require("./utils/ExpressError.js");
const {listingSchema} = require("./schema.js");
const {reviewSchema} = require("./schema.js");
const Review = require("./models/review.js");
const wrapasync = require("./utils/wrapasync.js");


const MONGO_URL = "mongodb://127.0.0.1:27017/wanderlust";


app.set("view engine","ejs");
app.set("views",path.join(__dirname,"views"));
app.use(express.urlencoded({extended:true}));
app.use(methodOverride("_method"));
app.engine('ejs', ejsMate);
app.use(express.static(path.join(__dirname,"/public")))

main().then(()=>{
    console.log("Connection Successful");
})
.catch((err)=>{
    console.log(err);
})

async function main(){
    await mongoose.connect(MONGO_URL);
}




app.get("/",async(req,res)=>{
    // res.render("listing/home.ejs")
    res.send("I am Root page")
})

const validateListing = (req,res,next)=>{
    let {error} = listingSchema.validate(req.body);
    if(error){
        let errorMsg = error.details.map((el) => el.message).join(",");
        throw new ExpressError(400,errorMsg);
    }
    else{
        next();
    }
}
const validateReview = (req,res,next)=>{
    let {error} = reviewSchema.validate(req.body);
    if(error){
        let errorMsg = error.details.map((el) => el.message).join(",");
        throw new ExpressError(400,errorMsg);
    }
    else{
        next();
    }
}

//index.rout
app.get("/listings", wrapAsync(async(req,res)=>{
    const allListing = await Listing.find({});
    res.render("listing/index.ejs",{allListing}); 
}));


// add new listing
app.get("/listings/new",(req,res)=>{
    res.render("listing/new.ejs");
});


//show route
app.get("/listings/:id", wrapAsync(async(req,res) =>{
    let {id} = req.params;
    const listing = await Listing.findById(id).populate("reviews");
    res.render("listing/show.ejs",{listing});
}));


// create route
app.post("/listings",validateListing, wrapAsync(async(req,res,next)=>{
    const newListing = new Listing(req.body.listing);
    await newListing.save();
    res.redirect("/listings");
}));

// edit route

app.get("/listings/:id/edit", wrapAsync(async(req,res)=>{
    let {id} = req.params;
    let listing = await Listing.findById(id);
    res.render("listing/edit.ejs",{listing});
}));


// update rout

app.put("/listings/:id",validateListing,wrapAsync(async(req,res)=>{
    let {id} = req.params;
    await Listing.findByIdAndUpdate(id,{...req.body.listing});
    res.redirect(`/listings/${id}`);
}));

// delete route
app.delete("/listings/:id", wrapAsync(async(req,res)=>{
    let{id} = req.params;
    await Listing.findByIdAndDelete(id);
    res.redirect("/listings");
}));

// Reviews
//review post route
app.post("/listings/:id/reviews", validateReview,wrapAsync(async(req,res)=>{
    let listing = await Listing.findById(req.params.id);
    let newReview = new Review(req.body.review);
    listing.reviews.push(newReview);
    await newReview.save();
    await listing.save();
    res.redirect(`/listings/${listing._id}`)
}));

// review delete  route

app.delete("/listings/:id/reviews/:reviewId",wrapasync(async(req,res)=>{
    let{id,reviewId} = req.params;
    await Listing.findByIdAndUpdate(id, {$pull: {reviews: reviewId}});
    await Review.findByIdAndDelete(reviewId);
    res.redirect(`/listings/${id}`);
}));

app.all("*",(req,res,next)=>{
    next(new ExpressError(404,"Page Not Found !"))
})

app.use((err,req,res,next)=>{
    let{statusCode= 500 , message= "something want wrong"}=err;
    // res.status(statusCode).send(message);
    res.status(statusCode).render("error.ejs",{message})
});

app.listen(8080,()=>{
    console.log("Server is listening  to port 8080");
})


// app.get("/testListing",async(req,res)=>{
//     let sampleListing = new Listing({
//         title: "My Tour",
//         description: "A tour description is the marketing content that explains what your tour is and it's unique selling points. ",
//         price: 20000,
//         location: "Tanga",
//         country:"Tanzania"
//     })
//     await sampleListing.save();
//     console.log("Sample was Save");
//     res.send("Successful Testing");

    
// })









